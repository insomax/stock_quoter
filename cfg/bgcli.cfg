# websocket配置
[websocket]
path=wss://biger.pro/ws
#path=ws://hq.sinajs.cn/wskt?list=s_sz002230
symbol=BTCUSDT
heartbeat_interval=0
subscribe=subscribe
heartbeat=heartbeat
#heartbeat=ping
parser=service_route
enable_reconnect=False
enable_trace=True

[RESP_HTTP_API]
access_tocken = maxiao
url = http://pub-api.qa.ccx123.com

[RSA]
#私钥文件
private_key = -----BEGIN RSA PRIVATE KEY-----
    MIICWgIBAAKBgFUIytlnjO9kbfSXh0D8Rkar79Nblt6sWi2SLJqMpyxlzqKrzhkW
    LpEgtaCmfgUyDlxwpL38waWXRA4BHVvzRUztvH4e3gObjwZxenXpl8Au5Sc85sm6
    mnyV2StjeYeWOKDyJ87/nBC8gNaMb65Z38kPmLuFESvCszmEklxRqL6xAgMBAAEC
    gYA6CN4osnuFhs1keWZd+88avI3ZelDleEuzfmfisswFiRYV/5uRk4oEkoZjNj4b
    3aXfgSFuaOrg0PQpeqlG8CkDJnhGEe5t4GNQQOGDI2fnQ7UXAjQSFtISJQu9I8Oz
    wxRHr+B81trIyzLja+AYGrDm3/1SSBAy5+292XyaJW80gQJBAJRNPpCUtsALqcby
    wUhZAU2GhdLv7tZJPTSxQLrt2vB/tw1XPC8hTOxlvg2lOBjerfyLxcYhOpT6E3lb
    coq69mUCQQCSyYQWbwfQ7egcq044U+JkHWm9av6LSC0RxZj5xLqS5zwyVSXvQEu5
    DbAPaiWydf5EzEtiVwoWI4bMSbYSJoxdAkBSrtpyC6f0XMxUkqX2q0ERsy3LlGAp
    8v1/8k9vqQuHSP2LH5b7g+p6ZqNWwkYLf6OriVZEB+S8iMzwvW6YMHMNAkBS0T+l
    KJ/QUWpUQpKvVSS2N6IhLOzQyLgk/seApG5f0/cyrrfodO5ESmS7TbhXKBt91YXy
    xgj61LCJMk13kChBAkBwXwAxM5c0qPMbLs2mKDQbqb6KYgcFQZOjsj8u3T6zQvnX
    4jXF5U9sgNwyC/2IYVJvMAh9hXlFtEeGS3w2XL2M
    -----END RSA PRIVATE KEY-----

#公钥文件
public_key = -----BEGIN PUBLIC KEY-----
    MIGeMA0GCSqGSIb3DQEBAQUAA4GMADCBiAKBgFUIytlnjO9kbfSXh0D8Rkar79Nb
    lt6sWi2SLJqMpyxlzqKrzhkWLpEgtaCmfgUyDlxwpL38waWXRA4BHVvzRUztvH4e
    3gObjwZxenXpl8Au5Sc85sm6mnyV2StjeYeWOKDyJ87/nBC8gNaMb65Z38kPmLuF
    ESvCszmEklxRqL6xAgMBAAE=
    -----END PUBLIC KEY-----

# 定义logger模块，root是父类，必需存在的，其它的是自定义。
# logging.getLogger(NAME)便相当于向logging模块注册了一种日志打印
# name 中用 . 表示 log 的继承关系
[loggers]
keys=root,infoLog,warnLog

# 定义handler
[handlers]
keys=infoLogHandler,warnLogHandler

# 定义格式化输出
[formatters]
keys=infoLogFmt,warnLogFmt

#--------------------------------------------------
# 实现上面定义的logger模块，必需是[logger_xxxx]这样的形式
#--------------------------------------------------
# [logger_xxxx] logger_模块名称
# level     级别，级别有DEBUG、INFO、WARNING、ERROR、CRITICAL
# handlers  处理类，可以有多个，用逗号分开
# qualname  logger名称，应用程序通过 logging.getLogger获取。对于不能获取的名称，则记录到root模块。
# propagate 是否继承父类的log信息，0:否 1:是
[logger_root]
level=INFO
handlers=infoLogHandler

[logger_infoLog]
level=DEBUG
handlers=infoLogHandler
propagate=0
qualname=infoLog

[logger_warnLog]
level=DEBUG
handlers=warnLogHandler
propagate=0
qualname=warnLog



#--------------------------------------------------
# handler
#--------------------------------------------------
# [handler_xxxx]
# class handler类名
# level 日志级别
# formatter，上面定义的formatter
# args handler初始化函数参数

[handler_infoLogHandler]
#class=logging.handlers.TimedRotatingFileHandler
class=logging.handlers.RotatingFileHandler
level=DEBUG
formatter=infoLogFmt
# When computing the next rollover time for the first time (when the handler is created),
# the last modification time of an existing log file, or else the current time,
# is used to compute when the next rotation will occur.
args=('logs/bgcli.log', 'a', 200*1024*1024, 30)

[handler_warnLogHandler]
class=logging.handlers.RotatingFileHandler
level=DEBUG
formatter=warnLogFmt
args=('logs/bgcli.log.wf', 'a', 200*1024*1024, 30)




#--------------------------------------------------
# 日志格式
#--------------------------------------------------
# %(asctime)s       年-月-日 时-分-秒,毫秒 2013-04-26 20:10:43,745
# %(filename)s      文件名，不含目录
# %(pathname)s      目录名，完整路径
# %(funcName)s      函数名
# %(levelname)s     级别名
# %(lineno)d        行号
# %(module)s        模块名
# %(message)s       消息体
# %(name)s          日志模块名
# %(process)d       进程id
# %(processName)s   进程名
# %(thread)d        线程id
# %(threadName)s    线程名

[formatter_infoLogFmt]
format=%(asctime)s %(levelname)s %(message)s
class=logging.Formatter

[formatter_warnLogFmt]
format=%(asctime)s %(levelname)s %(message)s
class=logging.Formatter




